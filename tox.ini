[tox]
requires = tox-pip-version
skipsdist = true
envlist = lint,py39
source_package = auth0_api_client
all_sources = {[tox]source_package} tests/

[flake8]
max-line-length = 100

[testenv]
envdir = {toxworkdir}/py39
skip_install = true
pip_version = pip>=21.1

setenv = REDIS_INSTALLED = False
         ENVIRONMENT = DEVELOPMENT
         TOKEN_URL = https://draysonhealth-sandbox.eu.auth0.com/oauth/token
         AUTH0_MGMT_CLIENT_ID = fake
         AUTH0_MGMT_CLIENT_SECRET = fake
         AUTH0_AUTHZ_CLIENT_ID = fake
         AUTH0_AUTHZ_CLIENT_SECRET = fake
         AUTH0_AUTHZ_WEBTASK_URL = https://somefakeurl
         AUTH0_CLIENT_ID = test_client_id
         AUTH0_AUDIENCE = https://somefakeurl
         NONCUSTOM_AUTH0_DOMAIN = https://somefakeurl
         CUSTOMER_CODE = DEV
         PROXY_URL = https://dev.sensynehealth.com
         LOG_FORMAT = colour
         LOG_LEVEL = DEBUG

commands = poetry install -v
           black --check {[tox]source_package} tests/
           isort --profile black {[tox]source_package} tests/ --check-only
           mypy {[tox]source_package}
           bandit -r {[tox]source_package} -lll
           safety check
           coverage run --source {[tox]source_package} -m py.test {posargs}
           coverage report
           coverage xml -i -o coverage-reports/coverage.xml
allowlist_externals =
        bandit
        bash
        black
        coverage
        isort
        mypy
        poetry
        python
        safety
        true
list_dependencies_command = true

[testenv:.tox]
envdir={toxworkdir}/.provision

[testenv:lint]
description = Run black, isort, and mypy to clean up source files
commands =
       black {[tox]all_sources}
       isort --profile black {[tox]all_sources}
       mypy {[tox]source_package} tests/

[testenv:debug]
description = Run last failing unit test and invoke debugger on errors
commands =
    pytest --lf --pdb

[testenv:update]
description = Update poetry lock files
commands = poetry update
